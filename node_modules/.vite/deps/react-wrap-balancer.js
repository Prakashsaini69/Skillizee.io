"use client";
import {
  require_react
} from "./chunk-H5FQS3OF.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/react-wrap-balancer/dist/index.mjs
var import_react = __toESM(require_react(), 1);
var import_react2 = __toESM(require_react(), 1);
var E = typeof window == "undefined";
var m = E ? import_react2.default.useEffect : import_react2.default.useLayoutEffect;
var B = 0;
var _ = () => ++B;
var v = false;
function O() {
  let [n, r] = import_react2.default.useState(v ? _ : void 0);
  return m(() => {
    n === void 0 && r(_()), v = true;
  }, []), n === void 0 ? n : `rwb-${n.toString(32)}`;
}
function R() {
  return import_react2.default.useMemo(() => "useId" in import_react2.default ? import_react2.default.useId : O, [])();
}
var y = "__wrap_b";
var f = "__wrap_n";
var S = "__wrap_o";
var T = (n, r, e) => {
  e = e || document.querySelector(`[data-br="${n}"]`);
  let t = e == null ? void 0 : e.parentElement;
  if (!t) return;
  let l = (u) => e.style.maxWidth = u + "px";
  e.style.maxWidth = "";
  let i = t.clientWidth, d = t.clientHeight, o = i / 2 - 0.25, s = i + 0.5, c;
  if (i) {
    for (l(o), o = Math.max(e.scrollWidth, o); o + 1 < s; ) c = Math.round((o + s) / 2), l(c), t.clientHeight === d ? s = c : o = c;
    l(s * r + i * (1 - r));
  }
  e.__wrap_o || (typeof ResizeObserver != "undefined" ? (e.__wrap_o = new ResizeObserver(() => {
    self.__wrap_b(0, +e.dataset.brr, e);
  })).observe(t) : console.warn("The browser you are using does not support the ResizeObserver API. Please consider add polyfill for this API to avoid potential layout shifts or upgrade your browser. Read more: https://github.com/shuding/react-wrap-balancer#browser-support-information"));
};
var I = T.toString();
var w = '(self.CSS&&CSS.supports("text-wrap","balance")?1:2)';
var g = (n, r, e = "") => (e && (e = `self.${f}!=1&&${e}`), import_react.default.createElement("script", { suppressHydrationWarning: true, dangerouslySetInnerHTML: { __html: (n ? "" : `self.${f}=self.${f}||${w};self.${y}=${I};`) + e }, nonce: r }));
var h = import_react.default.createContext({ preferNative: true, hasProvider: false });
var Y = ({ preferNative: n = true, nonce: r, children: e }) => {
  let t = import_react.default.useMemo(() => ({ preferNative: n, hasProvider: true }), [n]);
  return import_react.default.createElement(h.Provider, { value: t }, g(false, r), e);
};
var P = import_react.default.forwardRef(({ ratio: n = 1, preferNative: r, nonce: e, children: t, as: l, ...i }, d) => {
  let o = R(), s = import_react.default.useRef(), c = import_react.default.useContext(h), u = r != null ? r : c.preferNative, x = l || "span";
  return import_react.default.useImperativeHandle(d, () => s.current, []), m(() => {
    u && self[f] === 1 || s.current && (self[y] = T)(0, n, s.current);
  }, [t, u, n]), m(() => {
    if (!(u && self[f] === 1)) return () => {
      if (!s.current) return;
      let b = s.current[S];
      b && (b.disconnect(), delete s.current[S]);
    };
  }, [u]), t && !Array.isArray(t) && typeof t == "object" && "type" in t && typeof t.type == "string" && t.type !== "span" && console.warn(`<Balancer> should not wrap <${t.type}> inside. Instead, it should directly wrap text or inline nodes.

Try changing this:
  <Balancer><${t.type}>content</${t.type}></Balancer>
To:
  <${t.type}><Balancer>content</Balancer></${t.type}>`), import_react.default.createElement(import_react.default.Fragment, null, import_react.default.createElement(x, { ...i, "data-br": o, "data-brr": n, ref: s, style: { display: "inline-block", verticalAlign: "top", textDecoration: "inherit", textWrap: u ? "balance" : "initial" }, suppressHydrationWarning: true }, t), g(c.hasProvider, e, `self.${y}("${o}",${n})`));
});
if (!E && true) {
  let n = document.querySelector("[data-next-hide-fouc]");
  if (n) {
    let r = (t) => {
      for (let l of t) for (let i of Array.from(l.removedNodes)) {
        if (i !== n) continue;
        e.disconnect();
        let d = document.querySelectorAll("[data-br]");
        for (let o of Array.from(d)) self[y](0, +o.dataset.brr, o);
      }
    }, e = new MutationObserver(r);
    e.observe(document.head, { childList: true });
  }
}
var A = P;
export {
  P as Balancer,
  Y as Provider,
  A as default
};
//# sourceMappingURL=react-wrap-balancer.js.map
