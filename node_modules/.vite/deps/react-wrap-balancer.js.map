{
  "version": 3,
  "sources": ["../../react-wrap-balancer/src/index.tsx", "../../react-wrap-balancer/src/utils.tsx"],
  "sourcesContent": ["'use client'\n\nimport React from 'react'\nimport { useId, IS_SERVER, useIsomorphicLayoutEffect } from './utils'\n\nconst SYMBOL_KEY = '__wrap_b'\nconst SYMBOL_NATIVE_KEY = '__wrap_n'\nconst SYMBOL_OBSERVER_KEY = '__wrap_o'\n\ninterface WrapperElement extends HTMLElement {\n  [SYMBOL_OBSERVER_KEY]?: ResizeObserver | undefined\n}\n\ntype RelayoutFn = (\n  id: string | number,\n  ratio: number,\n  wrapper?: WrapperElement\n) => void\n\ndeclare global {\n  interface Window {\n    [SYMBOL_KEY]: RelayoutFn\n    // A flag to indicate whether the browser supports text-balancing natively.\n    // undefined: not injected\n    // 1: injected and supported\n    // 2: injected but not supported\n    [SYMBOL_NATIVE_KEY]?: number\n  }\n}\n\nconst relayout: RelayoutFn = (id, ratio, wrapper) => {\n  wrapper =\n    wrapper || document.querySelector<WrapperElement>(`[data-br=\"${id}\"]`)\n  const container = wrapper?.parentElement\n\n  if (!container) { return; }\n\n  const update = (width: number) => (wrapper.style.maxWidth = width + 'px')\n\n  // Reset wrapper width\n  wrapper.style.maxWidth = ''\n\n  // Get the initial container size\n  const width = container.clientWidth\n  const height = container.clientHeight\n\n  // Synchronously do binary search and calculate the layout\n  let lower: number = width / 2 - 0.25\n  let upper: number = width + 0.5\n  let middle: number\n\n  if (width) {\n    // Ensure we don't search widths lower than when the text overflows\n    update(lower)\n    lower = Math.max(wrapper.scrollWidth, lower)\n\n    while (lower + 1 < upper) {\n      middle = Math.round((lower + upper) / 2)\n      update(middle)\n      if (container.clientHeight === height) {\n        upper = middle\n      } else {\n        lower = middle\n      }\n    }\n\n    // Update the wrapper width\n    update(upper * ratio + width * (1 - ratio))\n  }\n\n  // Create a new observer if we don't have one.\n  // Note that we must inline the key here as we use `toString()` to serialize\n  // the function.\n  if (!wrapper['__wrap_o']) {\n    if (typeof ResizeObserver !== 'undefined') {\n      ;(wrapper['__wrap_o'] = new ResizeObserver(() => {\n        self.__wrap_b(0, +wrapper.dataset.brr, wrapper)\n      })).observe(container)\n    } else {\n      // Silently ignore ResizeObserver for production builds\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(\n          'The browser you are using does not support the ResizeObserver API. ' +\n            'Please consider add polyfill for this API to avoid potential layout shifts or upgrade your browser. ' +\n            'Read more: https://github.com/shuding/react-wrap-balancer#browser-support-information'\n        )\n      }\n    }\n  }\n}\n\nconst RELAYOUT_STR = relayout.toString()\n\nconst isTextWrapBalanceSupported = `(self.CSS&&CSS.supports(\"text-wrap\",\"balance\")?1:2)`\n\nconst createScriptElement = (\n  injected: boolean,\n  nonce?: string,\n  suffix: string = ''\n) => {\n  if (suffix) {\n    suffix = `self.${SYMBOL_NATIVE_KEY}!=1&&${suffix}`\n  }\n  return (\n    <script\n      suppressHydrationWarning\n      dangerouslySetInnerHTML={{\n        // Calculate the balance initially for SSR\n        __html:\n          (injected\n            ? ''\n            : `self.${SYMBOL_NATIVE_KEY}=self.${SYMBOL_NATIVE_KEY}||${isTextWrapBalanceSupported};self.${SYMBOL_KEY}=${RELAYOUT_STR};`) +\n          suffix,\n      }}\n      nonce={nonce}\n    />\n  )\n}\n\ninterface BalancerOwnProps<\n  ElementType extends React.ElementType = React.ElementType\n> extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * The HTML tag to use for the wrapper element.\n   * @default 'span'\n   */\n  as?: ElementType\n  /**\n   * The balance ratio of the wrapper width (0 <= ratio <= 1).\n   * 0 means the wrapper width is the same as the container width (no balance, browser default).\n   * 1 means the wrapper width is the minimum (full balance, most compact).\n   * @default 1\n   */\n  ratio?: number\n  /**\n   * An option to skip the re-balance logic\n   * and use the native CSS text-balancing if supported.\n   * @default true\n   */\n  preferNative?: boolean\n  /**\n   * The nonce attribute to allowlist inline script injection by the component.\n   */\n  nonce?: string\n}\n\ntype BalancerProps<ElementType extends React.ElementType> =\n  BalancerOwnProps<ElementType> &\n    Omit<React.ComponentPropsWithoutRef<ElementType>, keyof BalancerOwnProps>\n\n/**\n * An optional provider to inject the global relayout function, so all children\n * Balancer components can share it.\n */\nconst BalancerContext = React.createContext<{\n  preferNative: boolean\n  hasProvider: boolean\n}>({ preferNative: true, hasProvider: false })\nconst Provider: React.FC<{\n  /**\n   * An option to skip the re-balance logic\n   * and use the native CSS text-balancing if supported.\n   * @default true\n   */\n  preferNative?: boolean\n  /**\n   * The nonce attribute to allowlist inline script injection by the component\n   */\n  nonce?: string\n  children?: React.ReactNode\n}> = ({ preferNative = true, nonce, children }) => {\n  const contextValue = React.useMemo(() => {\n    return {\n      preferNative,\n      hasProvider: true,\n    }\n  }, [preferNative])\n  return (\n    <BalancerContext.Provider value={contextValue}>\n      {createScriptElement(false, nonce)}\n      {children}\n    </BalancerContext.Provider>\n  )\n}\n\nconst Balancer = React.forwardRef(\n  <ElementType extends React.ElementType = React.ElementType>(\n    {\n      ratio = 1,\n      preferNative,\n      nonce,\n      children,\n      as,\n      ...props\n    }: BalancerProps<ElementType>,\n    ref\n  ) => {\n    const id = useId()\n    const wrapperRef = React.useRef<WrapperElement>()\n    const contextValue = React.useContext(BalancerContext)\n    const preferNativeBalancing = preferNative ?? contextValue.preferNative\n    const Wrapper: React.ElementType = as || 'span'\n\n    React.useImperativeHandle(ref, () => wrapperRef.current, [])\n\n    // Re-balance on content change and on mount/hydration.\n    useIsomorphicLayoutEffect(() => {\n      // Skip if the browser supports text-balancing natively.\n      if (preferNativeBalancing && self[SYMBOL_NATIVE_KEY] === 1) return\n\n      if (wrapperRef.current) {\n        // Re-assign the function here as the component can be dynamically rendered, and script tag won't work in that case.\n        ;(self[SYMBOL_KEY] = relayout)(0, ratio, wrapperRef.current)\n      }\n    }, [children, preferNativeBalancing, ratio])\n\n    // Remove the observer when unmounting.\n    useIsomorphicLayoutEffect(() => {\n      // Skip if the browser supports text-balancing natively.\n      if (preferNativeBalancing && self[SYMBOL_NATIVE_KEY] === 1) return\n\n      return () => {\n        if (!wrapperRef.current) return\n\n        const resizeObserver = wrapperRef.current[SYMBOL_OBSERVER_KEY]\n        if (!resizeObserver) return\n\n        resizeObserver.disconnect()\n        delete wrapperRef.current[SYMBOL_OBSERVER_KEY]\n      }\n    }, [preferNativeBalancing])\n\n    if (process.env.NODE_ENV === 'development') {\n      // In development, we check `children`'s type to ensure we are not wrapping\n      // elements like <p> or <h1> inside. Instead <Balancer> should directly\n      // wrap text nodes.\n      if (\n        children &&\n        !Array.isArray(children) &&\n        typeof children === 'object'\n      ) {\n        if (\n          'type' in children &&\n          typeof children.type === 'string' &&\n          children.type !== 'span'\n        ) {\n          console.warn(\n            `<Balancer> should not wrap <${children.type}> inside. Instead, it should directly wrap text or inline nodes.\n\nTry changing this:\n  <Balancer><${children.type}>content</${children.type}></Balancer>\nTo:\n  <${children.type}><Balancer>content</Balancer></${children.type}>`\n          )\n        }\n      }\n    }\n\n    return (\n      <>\n        <Wrapper\n          {...props}\n          data-br={id}\n          data-brr={ratio}\n          ref={wrapperRef}\n          style={{\n            display: 'inline-block',\n            verticalAlign: 'top',\n            textDecoration: 'inherit',\n            textWrap: preferNativeBalancing ? 'balance' : 'initial',\n          }}\n          suppressHydrationWarning\n        >\n          {children}\n        </Wrapper>\n        {createScriptElement(\n          contextValue.hasProvider,\n          nonce,\n          `self.${SYMBOL_KEY}(\"${id}\",${ratio})`\n        )}\n      </>\n    )\n  }\n)\n\n// As Next.js adds `display: none` to `body` for development, we need to trigger\n// a re-balance right after the style is removed, synchronously.\nif (!IS_SERVER && process.env.NODE_ENV !== 'production') {\n  const next_dev_style = document.querySelector<HTMLElement>(\n    '[data-next-hide-fouc]'\n  )\n  if (next_dev_style) {\n    const callback: MutationCallback = (mutationList) => {\n      for (const mutation of mutationList) {\n        for (const node of Array.from(mutation.removedNodes)) {\n          if (node !== next_dev_style) continue\n\n          observer.disconnect()\n          const elements =\n            document.querySelectorAll<WrapperElement>('[data-br]')\n\n          for (const element of Array.from(elements)) {\n            self[SYMBOL_KEY](0, +element.dataset.brr, element)\n          }\n        }\n      }\n    }\n    const observer = new MutationObserver(callback)\n    observer.observe(document.head, { childList: true })\n  }\n}\n\nexport default Balancer\nexport { Provider, Balancer, BalancerOwnProps }\n", "import React from 'react'\n\nexport const IS_SERVER = typeof window === 'undefined'\nexport const useIsomorphicLayoutEffect = IS_SERVER\n  ? React.useEffect\n  : React.useLayoutEffect\n\nlet ID = 0\nconst genId = () => ++ID\nlet serverHandoffComplete = false\n\nfunction useIdPolyfill() {\n  const [id, setId] = React.useState(serverHandoffComplete ? genId : undefined)\n\n  useIsomorphicLayoutEffect(() => {\n    if (id === undefined) {\n      setId(genId())\n    }\n\n    serverHandoffComplete = true\n  }, [])\n\n  if (id === undefined) {\n    return id\n  }\n\n  return `rwb-${id.toString(32)}`\n}\n\n/**\n * A hook for generating unique IDs that are stable across the server and client,\n * while avoiding hydration mismatches. Compatible with React 16+ by using\n * [React 18's useId](https://reactjs.org/docs/hooks-reference.html#useid) if\n * it's available, and a polyfill implementation inspired by\n * [@accessible/use-id](https://github.com/accessible-ui/use-id) if it is not.\n *\n * \"rwb-\" is hard-coded as a prefix in the polyfill. When using React 18+,\n * a prefix can be provided with the `identifierPrefix` option in\n * [ReactDOMClient](https://reactjs.org/docs/react-dom-client.html).\n */\nexport function useId() {\n  const implementation = React.useMemo((): (() => string | number) => {\n    if ('useId' in React) return React.useId\n    return useIdPolyfill\n  }, [])\n\n  return implementation()\n}\n"],
  "mappings": "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",
  "names": ["import_react", "IS_SERVER", "useIsomorphicLayoutEffect", "React", "ID", "genId", "serverHandoffComplete", "useIdPolyfill", "id", "setId", "useId", "SYMBOL_KEY", "SYMBOL_NATIVE_KEY", "SYMBOL_OBSERVER_KEY", "relayout", "ratio", "wrapper", "container", "update", "width", "height", "lower", "upper", "middle", "RELAYOUT_STR", "isTextWrapBalanceSupported", "createScriptElement", "injected", "nonce", "suffix", "BalancerContext", "Provider", "preferNative", "children", "contextValue", "Balancer", "as", "props", "ref", "wrapperRef", "preferNativeBalancing", "Wrapper", "resizeObserver", "next_dev_style", "callback", "mutationList", "mutation", "node", "observer", "elements", "element", "src_default"]
}
